\documentclass[11pt]{article}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc} 
\usepackage[french]{babel}

\usepackage{animate}

\usepackage{hyperref}
\usepackage{color}
\usepackage{graphicx}
\usepackage{amsmath}

%--------------------------%
%  Victor - Page de garde  %
%--------------------------%
\title{\textbf{\textcolor{blue}{Le Mans Université \\} 
Licence Informatique \textit{2ème année\\} 
Module 174UP02 Rapport de Projet\\
\textbf{Battle of Time}}
\author{Victor Poirier\\Vincent Proudy\\Louison Roquain\\Thomas Wolter}
\date{\today}
}

\begin{document}

%----Page de garde---%
%Image
\begin{figure}[t]
    \includegraphics[height = 30pt]{logolemansU.png}
    \hspace{150pt}
    \includegraphics[height = 40pt]{logo_IC2.png}
\end{figure}
%Affichage du titre
\maketitle
%Lien Git en bas de page
\begin{figure}[b]
    \begin{center}
        \href{https://github.com/LeZigouli/Battle_Of_Time}{Lien GitHub}
    \end{center}
\end{figure}
%---------------------%

\newpage
\tableofcontents

%-------------------------%
%  Victor - Introduction  %
%-------------------------%
\newpage
\section{Introduction}
Dans le cadre de notre deuxième année de licence en informatique de l'université du Mans, nous avons entrepris la conception et la réalisation d'un jeu vidéo, sur la période de janvier à avril 2024. Ce projet nous a permis d'appliquer les connaissances acquises dans divers domaines, lors de notre cursus, tels que la programmation et la gestion de projet. Le jeu a été développé en langage C avec la librairie SDL2
\par
Nous avons choisi, pour ce projet, de nous orienter vers un jeu Tower Defense dans le style du jeu 'Age of War', c'est à dire un jeu se jouant à deux personnes (un joueur contre un joueur) dont le but principal est de détruire la base ennemie en achetant des troupes. 
\par
Ce rapport présente toutes les étapes de développement de ce projet. Nous commencerons par présenter le contexte et les motivations qui ont conduit à la création de ce jeu, puis nous décrirons en détail la conception, le développement et le test. Nous mettrons en lumière les défis rencontrés et les solutions que nous avons mises en œuvre pour les surmonter. Enfin, nous évaluerons les résultats obtenus, discuterons des leçons apprises et des perspectives futures pour le projet.


\begin{figure}[h]
    \centering
    \includegraphics[height = 220pt]{Page_accueil.png}
    \caption{Page d'accueil}
    \label{fig:page_daccueil}
\end{figure}

%-------------------------%
%  Thomas - Organisation  %
%-------------------------%
\newpage
\section{Organisation}
\par
Concernant la répartition des tâches de travail nous avons utilisé un tableau de Gantt pour se répartir les tâches efficacement.

\begin{figure}[h]
    \centering
    \includegraphics[height = 300pt]{Gantt1.png}
    \caption{Extrait de notre Gantt}
    \label{fig:Extrait Gantt}
\end{figure}

\par
Pour communiquer en dehors de l'université nous avons utilisé Discord, un logiciel de communication en ligne pour discuter par texte, voix et vidéo. Nous avons également pu partager des versions de test sans forcément les mettre sur notre git. 

%------------------------%
%  Vincent - Conception  %
%------------------------%
\newpage
\section{Concept}
\subsection{Règles du jeu}
Dans Battle of Time vous retrouverez deux mode de jeu, le mode solo (contre l'ordinateur), et le mode en ligne où vous jouerez contre un autre joueur. Peu importe le mode de jeu sélectionné au lancement de la partie vous commencerez a l'âge Préhistorique,  il existe cinq âges qui sont dans l'ordre suivant :
\begin{itemize}
    \item Préhistorique
    \item Antiquité
    \item Moyen-âge
    \item Moderne
    \item Futuriste
\end{itemize}
\begin{figure}[h]
    \centering
    \includegraphics[height = 100pt]{Fond_menu.png}
    \caption{Les 5 âges dans l'ordre croissant}
    \label{fig:fond_menu}
\end{figure}
\par
Une fois la partie lancée, vous retrouverez votre base du coté gauche du terrain, vous allez devoir la défendre pour ne pas que votre adversaire la détruise ! Â l'opposé, du côté droit, il y a la base qui appartient à votre adversaire. Pour endommager celle ci vous disposerez de quatre unités différentes à chaque âge. 
\begin{figure}[h]
    \centering
    \includegraphics[height = 60pt]{hud.png}
    \caption{HUD en partie}
    \label{fig:hud}
\end{figure}

\par
Pour les déployer ses unités vous allez devoir les acheter avec votre argent (situer à gauche de la boutique). Vous récolterez des pièces en éliminant des unités envoyées par votre adversaire. De plus  pour rendre la bataille encore plus rude,  quand vous déplorez une unité il y aura un temps d'attente avant qu'elle entre dans l'arène. 
Les unités contenues dans la boutique vont changer et devenir plus forte quand vous allez passer à l'âge supérieur, pour cela rien de plus simple, cliquer sur le bouton vert pour passer à l'âge supérieur. Attention cela n'est pas gratuit, il va falloir débourser votre expérience. Qui est également récupérer quand vous éliminerez des unités adverses 
\begin{figure}[h]
    \centering
    \includegraphics[height = 60pt]{upgrade.png}
    \caption{passage à l'âge supérieur}
    \label{fig:bouton_upgrade}
\end{figure}

Après avoir changer d'âge vous verrez que le fond et votre base auront changer de design et que les unités contenus dans le magasin également (à chaque âge le principe du jeu reste le même). C'est que votre passage à l'âge supérieur a bien été effectuer. 
\begin{figure}[h]
    \centering
    \includegraphics[height = 60pt]{ultimate.png}
    \caption{utilisation de l'ultime}
    \label{fig:bouton_ultimate}
\end{figure}

Les deux joueurs possèdent aussi une compétence spéciale appelée Ultime. Cette compétence aura pour effet d'éliminer toutes les troupes adverses simultanément et instantanément. Cette capacité possède toutefois un tarif très élevé. De plus, elle dispose d'un délais de recharge,  c'est à dire pendant ce laps de temps vous ne pourrez pas l'utiliser.
\begin{figure}[h]
    \centering
    \includegraphics[height = 60pt]{parametre.png}
    \caption{accès aux paramètres}
    \label{fig:bouton_parametre}
\end{figure}

Durant la partie, vous aurez accès au menu paramètre. Si vous voulez interrompre la partie prématurément et la continuer ultérieurement vous pourrez sauvegarder votre partie à tout moment. Le jeu n'accepte qu'une sauvegarde, si vous sauvegardez une partie, une autre partie déjà sauvegardée sera écrasée.
Notre jeu propose plusieurs difficultés qui sont dans l'ordre suivants :
\begin{itemize}
    \item facile
    \item intermédiaire
    \item difficile
\end{itemize}
Selon votre choix, au début de la partie vous allez partir avec plus ou moins d'argent. De plus l'ordinateur aura une plus grosse soif de victoire.

\subsection{Fonctionnalité du programme}
Dans ce jeu de stratégie captivant, les joueurs s'affrontent pour dominer le monde à travers différentes époques historiques. Chaque joueur contrôle une civilisation, entraîne des armées et tente de conquérir des territoires.
\\ \\
La partie débute avec chaque joueur possédant une cité et quelques troupes de base. Au fur et à mesure que le jeu progresse, les joueurs déploient leurs troupes sur le champ de bataille, tentant de capturer des territoires stratégiques pour gagner des ressources et renforcer leur position.
 Le jeu est rythmé par des phases où les joueurs peuvent développer leur cité, recrutées des unités puissantes, utiliser des compétences uniques, etc. Mais attention, chaque décision compte, car les ressources sont limitées et la concurrence est féroce. 
 \\ \\
Au fil des âges, les technologies évoluent, débloquant de nouvelles unités et stratégies. Les joueurs doivent s'adapter aux changements du champ de bataille et anticiper les mouvements de leurs adversaires pour prendre l'avantage.
\\ \\
La partie atteint son apogée lorsque l'un des joueurs réussit à capturer la cité de son adversaire, déclarant ainsi sa victoire et sa domination sur l'ère dans laquelle ils se trouvent.
Une fois qu'un joueur a atteint les conditions de victoire la partie prend fin. Le vainqueur est alors déclaré, célébrant sa suprématie dans l'âge de la guerre.
\newpage


% Victor %
\subsection{Direction artistique du projet}
L'idée principale pour la direction artistique était de créer nous même les designs 3D. Cependant, on s'est vite rendu compte que cela était long et compliqué à réaliser, on a donc choisi le pixelart qui est plus facile à mettre en place avec de nombreux outils existants. Nous avons utilisé principalement 4 sites gratuits :
\begin{itemize}
    \item \href{https://fr.freepik.com/}{Freepik} (pour télécharger des images vectorielles libres de droit)
    \item \href{https://onlinepngtools.com/}{Online PNG Tools} (pour supprimer le fond des images)
    \item \href{https://giventofly.github.io/pixelit/}{Pixel It} (pour pixeliser les images)
    \item \href{https://pixlr.com/fr/}{Pixlr} (pour le montage photo)
\end{itemize}
En ce qui concerne la police d'écrire, nous avons choisi \href{https://github.com/rosettatype/handjet?tab=OFL-1.1-1-ov-file}{'handjet'} qui disponible sur GitHub. 

\begin{figure}[h]
    \centering
    \includegraphics[height = 120pt]{Battle_of_Time.png}
    \caption{Exemple de police}
    \label{fig:titre du jeu}
\end{figure}

Pour la musique et les effets sonore, le site \href{https://pixabay.com/fr/}{Pixabay} nous a permis de choisir une musique libre de droit ainsi que des effets sonores.





%--------------%
%----Codage----%
%--------------%
\newpage
\section{Codage}
% Louison %
\subsection{Algorithme et structures de données}
\subsubsection{Outils}
Le jeu est implémenter en C en utilisant Visual Studio Code pour plus de lisibilité\ldots

Doxygen.

github.

utilisation SDL.



Dans un premier temps, c'est la partie fonctionnel du jeu qui a été développé \ldots

I/Menu
\subsubsection{Structures de données}
Pour les délais quel qu'il soit, a été utiliser un difftime pour vérifié l'écoulement du temps sans bloquer le programme.


building:
\begin{figure}[h]
    \centering
    \includegraphics[height = 100pt]{building_struct.png}
    \caption{Structure de building}
    \label{fig:Structure de character}
\end{figure}

charactere:
\begin{figure}[h]
    \centering
    \includegraphics[height = 80pt]{character_struct.png}
    \caption{Structure de character}
    \label{fig:Structure de character}
\end{figure}

Pour des raison de simplification les statistique de chaque "charactere" est dépendent du précédant pour éviter la redondance de code. Seul les stats suivante sont calculer par des suite mathématique pour que cela reste équilibrer

joueur :

-2 fonction utiliser pour l'achat et la formation 

En ce qui concerne l'ordinateur : 
\begin{figure}[h]
    \centering
    \includegraphics[height = 100pt]{ordi_struct.png}
    \caption{Structure de l'ordinateur}
    \label{fig:Structure de l'ordinateur}
\end{figure}

-l'envoie de personnage illimité (pas de restriction d'argent ). Cela est décider aléatoirement entre 1 et n secondes en fonction de la difficulté choisi et dans un Maximum de 15 secondes (En mode facile) puis on divise par deux se maximum pour le mode normal et enfin toute les 5 seconde (en mode difficile) malgré le temps de formation de troupe QUI peut être supérieur  qui est fait pour être un vrai challenge de stratégie en temps réel.

-L'ultime est également déclencher aléatoirement dans un intervalle de 5 a 15 min (Pour éviter de rendre l'ordinateur invincible).

-building.


main:

img algo principale.


Puis dans un second temps, la transposition graphique de nos élément.

\newpage
\subsection{Interface graphique (SDL)}

% Thomas %
\subsubsection{Sprites et collisions}
Pour réaliser les sprite des personnages présents dans notre jeu, nous avons utilisé ce \href{https://sanderfrenken.github.io/Universal-LPC-Spritesheet-Character-Generator/}{générateur} qui est sous licence CC BY-SA 3.0 donc libre d'utilisation si l'on crédite les auteurs de celui ci dans notre projet. Ce générateur nous a permis de créer des personnages en choisissant leurs caractéristiques, le tout en style pixel.
\begin{figure}[h]
    \centering
    \includegraphics[height = 300pt]{generateur_sprite.png}
    \caption{générateur de sprite}
    \label{fig:generateur de sprite}
\end{figure}

%gif qui ne marche pas très bien, a améliorer ou enlever%
\begin{figure}
    \centering
    \animategraphics[autoplay,loop,width=0.8\linewidth]{10}{gif_perso-}{1}{9}
    \caption{Animation à partir des images PNG}
\end{figure}

\par
Le png généré contient les images d'animations du personnage généré.
\begin{figure}[h]
    \centering
    \includegraphics[height = 350pt]{melee.png}
    \caption{sprite généré}
    \label{fig: sprite généré}
\end{figure}




\newpage

% Victor %
\subsubsection{Interface du menu et du jeu}
L'interface graphique du menu et du jeu en a été réalisée en SDL2 en utilisant les bibliothèques suivantes :
\begin{itemize}
    \item SDL.h
    \item SDL\_image.h
    \item SDL\_mixer.h
    \item SDL\_ttf.h \\
\end{itemize}

Lorsque le jeu est lancé, nous arrivons sur la page d'accueil \ref{fig:page_daccueil} qui nous emmène ensuite sur le menu principale !!CAPTURE D'ÉCRAN!! qui lui-même permet d'accéder au différent sous-menu comme les options, les crédits, jouer au jeu ou encore quitter le programme. Le fichier \textit{afficher\_menu.c} contient les fonctions d'affichage des différents sous-menu. Ce fichier contient également la fonction \texttt{void affichage(etat\_t etat, \ldots)} qui est gère à l'aide du paramètre \texttt{etat\_t etat}, dans un \texttt{switch}, l'entièreté de l'affichage du programme en appelant, en fonction de l'état d'affichage, les fonctions d'affichage des menus et du jeu



% Vincent %
\newpage
\subsection{Le mode réseau}

\par
Notre jeu possède un mode réseau, nous allons utiliser plusieurs librairies dédiées en C. 
Nous avons utilisé une architecture semblable à du \emph{serveur-client}. Une machine prendra le rôle du serveur et une autre du client. \\
\par
Pour que le déroulement d'une partie en ligne soit sans accroc pour les deux joueurs, nous allons devoir faire transiter entre les deux machines des informations essentielles. Dans un premier temps, nous allons mettre en contact les deux machines. Note : La machine A prend le rôle du \emph{serveur} et la machine B devient le \emph{client}. \\ \\
Le principe est le suivant :
\begin{enumerate}
    \item sur la machine A on \textbf{affiche son adresse IP}
    \item on met \textbf{le port X en écoute} de la machine A
    \item sur la machine B, on \textbf{rentre l'adresse IP de la machine A}.
    \item La machine B \textbf{se connecte sur le port X} de la machine A. \\
\end{enumerate}

\par
La machine A et B sont maintenant en communication. Tant que la connexion n'a pas été rompue, les deux machines peuvent communiquer entre elle. Deuxièmement, on doit faire transiter les informations, les librairies inclues nous permettent d'utiliser des fonctions déjà écrites et fiables. Les deux fonctions principales pour le partage de donnée sont :
\begin{itemize}
    \item \texttt{ send(int s, const void * buf, size\_t len, int flags)}
    \item \texttt{ recv(int s, void * buf, size\_t len, int flags)} \\
\end{itemize}

\par
Ces deux fonctions sont très similaires. en effet :
\begin{table}[htbp]
    \centering
    \caption{Récapitulatif des arguments}
    \begin{tabular}{|c|c|c|c|}
        \hline
        & int s & void * buf & size\_t len \\
        \hline
        send & @ destination & pointeur générique sur un objet & taille de l'objet\\
        \hline
        recv & @ de l'expéditeur & pointeur générique sur un objet résultat & taille de l'objet  \\
        \hline
    \end{tabular}
    \label{tab:tab_reseau}
\end{table}

\par
Les deux fonctions \emph{send} et \emph{recv} ont été appelées dans deux fonctions adaptées a notre programmes nommées : 
\begin{itemize}
    \item\texttt{void envoyer\_structure(int to, player\_t player1, player\_t player2)}
    \item\texttt{void recevoir\_structure(int to, player\_t * player, player\_t * player2)} \\
\end{itemize}

\par 
Les informations essentiels sont les deux structures des joueurs, car elles contiennent tout ce qu'il faut pour jouer. On aura juste a comparer les différences entre les deux tableaux, à minima :
\begin{itemize}
    \item Seulement l'unité la plus avancé a subie des dégâts 
    \item On regarde si une unité a été déployée ou à été tué
\end{itemize}

%------------------%
%----Conclusion----%
%------------------%
\newpage
\section{Conclusion et résultat}

% Thomas %
\subsection{Fonctionnalités du programme réalisées ?}

% Louison %
\subsection{Planning prévisionnel respecté ?}
Non !  si, Mdr Comment ? 

% Vincent %
\newpage
\subsection{Améliorations possibles ?}


% Victor %
\subsection{Apports du projet}



\end{document}
